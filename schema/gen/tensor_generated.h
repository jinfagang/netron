// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TENSOR_WNN_H_
#define FLATBUFFERS_GENERATED_TENSOR_WNN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

#include "type_generated.h"

namespace wnn {

struct Blob;
struct BlobBuilder;
struct BlobT;

struct ListValue;
struct ListValueBuilder;
struct ListValueT;

struct Attribute;
struct AttributeBuilder;
struct AttributeT;

struct NamedAttrList;
struct NamedAttrListBuilder;
struct NamedAttrListT;

inline const flatbuffers::TypeTable *BlobTypeTable();

inline const flatbuffers::TypeTable *ListValueTypeTable();

inline const flatbuffers::TypeTable *AttributeTypeTable();

inline const flatbuffers::TypeTable *NamedAttrListTypeTable();

enum WNN_DATA_FORMAT : int8_t {
  WNN_DATA_FORMAT_NCHW = 0,
  WNN_DATA_FORMAT_NHWC = 1,
  WNN_DATA_FORMAT_NC4HW4 = 2,
  WNN_DATA_FORMAT_NHWC4 = 3,
  WNN_DATA_FORMAT_UNKNOWN = 4,
  WNN_DATA_FORMAT_MIN = WNN_DATA_FORMAT_NCHW,
  WNN_DATA_FORMAT_MAX = WNN_DATA_FORMAT_UNKNOWN
};

inline const WNN_DATA_FORMAT (&EnumValuesWNN_DATA_FORMAT())[5] {
  static const WNN_DATA_FORMAT values[] = {
    WNN_DATA_FORMAT_NCHW,
    WNN_DATA_FORMAT_NHWC,
    WNN_DATA_FORMAT_NC4HW4,
    WNN_DATA_FORMAT_NHWC4,
    WNN_DATA_FORMAT_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesWNN_DATA_FORMAT() {
  static const char * const names[6] = {
    "NCHW",
    "NHWC",
    "NC4HW4",
    "NHWC4",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameWNN_DATA_FORMAT(WNN_DATA_FORMAT e) {
  if (flatbuffers::IsOutRange(e, WNN_DATA_FORMAT_NCHW, WNN_DATA_FORMAT_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesWNN_DATA_FORMAT()[index];
}

struct BlobT : public flatbuffers::NativeTable {
  typedef Blob TableType;
  std::vector<int32_t> dims{};
  wnn::WNN_DATA_FORMAT dataformat = wnn::WNN_DATA_FORMAT_NCHW;
  wnn::DataType dtype = wnn::DataType_DT_FLOAT;
  wnn::DeviceType device = wnn::DeviceType_kX86;
  std::vector<uint8_t> uint8s{};
  std::vector<uint8_t> int8s{};
  std::vector<int32_t> int32s{};
  std::vector<int64_t> int64s{};
  std::vector<float> float32s{};
  std::vector<std::string> strings{};
};

struct Blob FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BlobT NativeTableType;
  typedef BlobBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return BlobTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIMS = 4,
    VT_DATAFORMAT = 6,
    VT_DTYPE = 8,
    VT_DEVICE = 10,
    VT_UINT8S = 12,
    VT_INT8S = 14,
    VT_INT32S = 16,
    VT_INT64S = 18,
    VT_FLOAT32S = 20,
    VT_STRINGS = 22
  };
  const flatbuffers::Vector<int32_t> *dims() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_DIMS);
  }
  wnn::WNN_DATA_FORMAT dataformat() const {
    return static_cast<wnn::WNN_DATA_FORMAT>(GetField<int8_t>(VT_DATAFORMAT, 0));
  }
  wnn::DataType dtype() const {
    return static_cast<wnn::DataType>(GetField<int32_t>(VT_DTYPE, 1));
  }
  wnn::DeviceType device() const {
    return static_cast<wnn::DeviceType>(GetField<int32_t>(VT_DEVICE, 0));
  }
  const flatbuffers::Vector<uint8_t> *uint8s() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_UINT8S);
  }
  const flatbuffers::Vector<uint8_t> *int8s() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INT8S);
  }
  const flatbuffers::Vector<int32_t> *int32s() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INT32S);
  }
  const flatbuffers::Vector<int64_t> *int64s() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_INT64S);
  }
  const flatbuffers::Vector<float> *float32s() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_FLOAT32S);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *strings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STRINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DIMS) &&
           verifier.VerifyVector(dims()) &&
           VerifyField<int8_t>(verifier, VT_DATAFORMAT, 1) &&
           VerifyField<int32_t>(verifier, VT_DTYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_DEVICE, 4) &&
           VerifyOffset(verifier, VT_UINT8S) &&
           verifier.VerifyVector(uint8s()) &&
           VerifyOffset(verifier, VT_INT8S) &&
           verifier.VerifyVector(int8s()) &&
           VerifyOffset(verifier, VT_INT32S) &&
           verifier.VerifyVector(int32s()) &&
           VerifyOffset(verifier, VT_INT64S) &&
           verifier.VerifyVector(int64s()) &&
           VerifyOffset(verifier, VT_FLOAT32S) &&
           verifier.VerifyVector(float32s()) &&
           VerifyOffset(verifier, VT_STRINGS) &&
           verifier.VerifyVector(strings()) &&
           verifier.VerifyVectorOfStrings(strings()) &&
           verifier.EndTable();
  }
  BlobT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BlobT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Blob> Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlobT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BlobBuilder {
  typedef Blob Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dims(flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims) {
    fbb_.AddOffset(Blob::VT_DIMS, dims);
  }
  void add_dataformat(wnn::WNN_DATA_FORMAT dataformat) {
    fbb_.AddElement<int8_t>(Blob::VT_DATAFORMAT, static_cast<int8_t>(dataformat), 0);
  }
  void add_dtype(wnn::DataType dtype) {
    fbb_.AddElement<int32_t>(Blob::VT_DTYPE, static_cast<int32_t>(dtype), 1);
  }
  void add_device(wnn::DeviceType device) {
    fbb_.AddElement<int32_t>(Blob::VT_DEVICE, static_cast<int32_t>(device), 0);
  }
  void add_uint8s(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> uint8s) {
    fbb_.AddOffset(Blob::VT_UINT8S, uint8s);
  }
  void add_int8s(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> int8s) {
    fbb_.AddOffset(Blob::VT_INT8S, int8s);
  }
  void add_int32s(flatbuffers::Offset<flatbuffers::Vector<int32_t>> int32s) {
    fbb_.AddOffset(Blob::VT_INT32S, int32s);
  }
  void add_int64s(flatbuffers::Offset<flatbuffers::Vector<int64_t>> int64s) {
    fbb_.AddOffset(Blob::VT_INT64S, int64s);
  }
  void add_float32s(flatbuffers::Offset<flatbuffers::Vector<float>> float32s) {
    fbb_.AddOffset(Blob::VT_FLOAT32S, float32s);
  }
  void add_strings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> strings) {
    fbb_.AddOffset(Blob::VT_STRINGS, strings);
  }
  explicit BlobBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Blob> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Blob>(end);
    return o;
  }
};

inline flatbuffers::Offset<Blob> CreateBlob(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> dims = 0,
    wnn::WNN_DATA_FORMAT dataformat = wnn::WNN_DATA_FORMAT_NCHW,
    wnn::DataType dtype = wnn::DataType_DT_FLOAT,
    wnn::DeviceType device = wnn::DeviceType_kX86,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> uint8s = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> int8s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> int32s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> int64s = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> float32s = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> strings = 0) {
  BlobBuilder builder_(_fbb);
  builder_.add_strings(strings);
  builder_.add_float32s(float32s);
  builder_.add_int64s(int64s);
  builder_.add_int32s(int32s);
  builder_.add_int8s(int8s);
  builder_.add_uint8s(uint8s);
  builder_.add_device(device);
  builder_.add_dtype(dtype);
  builder_.add_dims(dims);
  builder_.add_dataformat(dataformat);
  return builder_.Finish();
}

inline flatbuffers::Offset<Blob> CreateBlobDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *dims = nullptr,
    wnn::WNN_DATA_FORMAT dataformat = wnn::WNN_DATA_FORMAT_NCHW,
    wnn::DataType dtype = wnn::DataType_DT_FLOAT,
    wnn::DeviceType device = wnn::DeviceType_kX86,
    const std::vector<uint8_t> *uint8s = nullptr,
    const std::vector<uint8_t> *int8s = nullptr,
    const std::vector<int32_t> *int32s = nullptr,
    const std::vector<int64_t> *int64s = nullptr,
    const std::vector<float> *float32s = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *strings = nullptr) {
  auto dims__ = dims ? _fbb.CreateVector<int32_t>(*dims) : 0;
  auto uint8s__ = uint8s ? _fbb.CreateVector<uint8_t>(*uint8s) : 0;
  auto int8s__ = int8s ? _fbb.CreateVector<uint8_t>(*int8s) : 0;
  auto int32s__ = int32s ? _fbb.CreateVector<int32_t>(*int32s) : 0;
  auto int64s__ = int64s ? _fbb.CreateVector<int64_t>(*int64s) : 0;
  auto float32s__ = float32s ? _fbb.CreateVector<float>(*float32s) : 0;
  auto strings__ = strings ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*strings) : 0;
  return wnn::CreateBlob(
      _fbb,
      dims__,
      dataformat,
      dtype,
      device,
      uint8s__,
      int8s__,
      int32s__,
      int64s__,
      float32s__,
      strings__);
}

flatbuffers::Offset<Blob> CreateBlob(flatbuffers::FlatBufferBuilder &_fbb, const BlobT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ListValueT : public flatbuffers::NativeTable {
  typedef ListValue TableType;
  std::vector<std::string> s{};
  std::vector<int32_t> i{};
  std::vector<float> f{};
  std::vector<bool> b{};
  std::vector<wnn::DataType> type{};
};

struct ListValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ListValueT NativeTableType;
  typedef ListValueBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ListValueTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_S = 4,
    VT_I = 6,
    VT_F = 8,
    VT_B = 10,
    VT_TYPE = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *s() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_S);
  }
  const flatbuffers::Vector<int32_t> *i() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_I);
  }
  const flatbuffers::Vector<float> *f() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_F);
  }
  const flatbuffers::Vector<uint8_t> *b() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_B);
  }
  const flatbuffers::Vector<int32_t> *type() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_TYPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_S) &&
           verifier.VerifyVector(s()) &&
           verifier.VerifyVectorOfStrings(s()) &&
           VerifyOffset(verifier, VT_I) &&
           verifier.VerifyVector(i()) &&
           VerifyOffset(verifier, VT_F) &&
           verifier.VerifyVector(f()) &&
           VerifyOffset(verifier, VT_B) &&
           verifier.VerifyVector(b()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyVector(type()) &&
           verifier.EndTable();
  }
  ListValueT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ListValueT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ListValue> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ListValueBuilder {
  typedef ListValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s) {
    fbb_.AddOffset(ListValue::VT_S, s);
  }
  void add_i(flatbuffers::Offset<flatbuffers::Vector<int32_t>> i) {
    fbb_.AddOffset(ListValue::VT_I, i);
  }
  void add_f(flatbuffers::Offset<flatbuffers::Vector<float>> f) {
    fbb_.AddOffset(ListValue::VT_F, f);
  }
  void add_b(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> b) {
    fbb_.AddOffset(ListValue::VT_B, b);
  }
  void add_type(flatbuffers::Offset<flatbuffers::Vector<int32_t>> type) {
    fbb_.AddOffset(ListValue::VT_TYPE, type);
  }
  explicit ListValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ListValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ListValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<ListValue> CreateListValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> s = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> i = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> f = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> b = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> type = 0) {
  ListValueBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_b(b);
  builder_.add_f(f);
  builder_.add_i(i);
  builder_.add_s(s);
  return builder_.Finish();
}

inline flatbuffers::Offset<ListValue> CreateListValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *s = nullptr,
    const std::vector<int32_t> *i = nullptr,
    const std::vector<float> *f = nullptr,
    const std::vector<uint8_t> *b = nullptr,
    const std::vector<int32_t> *type = nullptr) {
  auto s__ = s ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*s) : 0;
  auto i__ = i ? _fbb.CreateVector<int32_t>(*i) : 0;
  auto f__ = f ? _fbb.CreateVector<float>(*f) : 0;
  auto b__ = b ? _fbb.CreateVector<uint8_t>(*b) : 0;
  auto type__ = type ? _fbb.CreateVector<int32_t>(*type) : 0;
  return wnn::CreateListValue(
      _fbb,
      s__,
      i__,
      f__,
      b__,
      type__);
}

flatbuffers::Offset<ListValue> CreateListValue(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AttributeT : public flatbuffers::NativeTable {
  typedef Attribute TableType;
  std::string s{};
  int32_t i = 0;
  bool b = false;
  std::string key{};
  wnn::DataType type = wnn::DataType_DT_INVALID;
  float f = 0.0f;
  std::unique_ptr<wnn::BlobT> blob{};
  std::unique_ptr<wnn::ListValueT> list{};
  std::unique_ptr<wnn::NamedAttrListT> func{};
  std::vector<int32_t> shape{};
  std::vector<int8_t> data{};
  AttributeT() = default;
  AttributeT(const AttributeT &o);
  AttributeT(AttributeT&&) FLATBUFFERS_NOEXCEPT = default;
  AttributeT &operator=(AttributeT o) FLATBUFFERS_NOEXCEPT;
};

struct Attribute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AttributeT NativeTableType;
  typedef AttributeBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AttributeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_S = 4,
    VT_I = 6,
    VT_B = 8,
    VT_KEY = 10,
    VT_TYPE = 12,
    VT_F = 14,
    VT_BLOB = 16,
    VT_LIST = 18,
    VT_FUNC = 20,
    VT_SHAPE = 22,
    VT_DATA = 24
  };
  const flatbuffers::String *s() const {
    return GetPointer<const flatbuffers::String *>(VT_S);
  }
  int32_t i() const {
    return GetField<int32_t>(VT_I, 0);
  }
  bool b() const {
    return GetField<uint8_t>(VT_B, 0) != 0;
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const Attribute *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *_key) const {
    return strcmp(key()->c_str(), _key);
  }
  wnn::DataType type() const {
    return static_cast<wnn::DataType>(GetField<int32_t>(VT_TYPE, 0));
  }
  float f() const {
    return GetField<float>(VT_F, 0.0f);
  }
  const wnn::Blob *blob() const {
    return GetPointer<const wnn::Blob *>(VT_BLOB);
  }
  const wnn::ListValue *list() const {
    return GetPointer<const wnn::ListValue *>(VT_LIST);
  }
  const wnn::NamedAttrList *func() const {
    return GetPointer<const wnn::NamedAttrList *>(VT_FUNC);
  }
  const flatbuffers::Vector<int32_t> *shape() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
  }
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_S) &&
           verifier.VerifyString(s()) &&
           VerifyField<int32_t>(verifier, VT_I, 4) &&
           VerifyField<uint8_t>(verifier, VT_B, 1) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyField<int32_t>(verifier, VT_TYPE, 4) &&
           VerifyField<float>(verifier, VT_F, 4) &&
           VerifyOffset(verifier, VT_BLOB) &&
           verifier.VerifyTable(blob()) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyTable(list()) &&
           VerifyOffset(verifier, VT_FUNC) &&
           verifier.VerifyTable(func()) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.VerifyVector(shape()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  AttributeT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AttributeT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Attribute> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AttributeBuilder {
  typedef Attribute Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s(flatbuffers::Offset<flatbuffers::String> s) {
    fbb_.AddOffset(Attribute::VT_S, s);
  }
  void add_i(int32_t i) {
    fbb_.AddElement<int32_t>(Attribute::VT_I, i, 0);
  }
  void add_b(bool b) {
    fbb_.AddElement<uint8_t>(Attribute::VT_B, static_cast<uint8_t>(b), 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Attribute::VT_KEY, key);
  }
  void add_type(wnn::DataType type) {
    fbb_.AddElement<int32_t>(Attribute::VT_TYPE, static_cast<int32_t>(type), 0);
  }
  void add_f(float f) {
    fbb_.AddElement<float>(Attribute::VT_F, f, 0.0f);
  }
  void add_blob(flatbuffers::Offset<wnn::Blob> blob) {
    fbb_.AddOffset(Attribute::VT_BLOB, blob);
  }
  void add_list(flatbuffers::Offset<wnn::ListValue> list) {
    fbb_.AddOffset(Attribute::VT_LIST, list);
  }
  void add_func(flatbuffers::Offset<wnn::NamedAttrList> func) {
    fbb_.AddOffset(Attribute::VT_FUNC, func);
  }
  void add_shape(flatbuffers::Offset<flatbuffers::Vector<int32_t>> shape) {
    fbb_.AddOffset(Attribute::VT_SHAPE, shape);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(Attribute::VT_DATA, data);
  }
  explicit AttributeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Attribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Attribute>(end);
    fbb_.Required(o, Attribute::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<Attribute> CreateAttribute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> s = 0,
    int32_t i = 0,
    bool b = false,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    wnn::DataType type = wnn::DataType_DT_INVALID,
    float f = 0.0f,
    flatbuffers::Offset<wnn::Blob> blob = 0,
    flatbuffers::Offset<wnn::ListValue> list = 0,
    flatbuffers::Offset<wnn::NamedAttrList> func = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> shape = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0) {
  AttributeBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_shape(shape);
  builder_.add_func(func);
  builder_.add_list(list);
  builder_.add_blob(blob);
  builder_.add_f(f);
  builder_.add_type(type);
  builder_.add_key(key);
  builder_.add_i(i);
  builder_.add_s(s);
  builder_.add_b(b);
  return builder_.Finish();
}

inline flatbuffers::Offset<Attribute> CreateAttributeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *s = nullptr,
    int32_t i = 0,
    bool b = false,
    const char *key = nullptr,
    wnn::DataType type = wnn::DataType_DT_INVALID,
    float f = 0.0f,
    flatbuffers::Offset<wnn::Blob> blob = 0,
    flatbuffers::Offset<wnn::ListValue> list = 0,
    flatbuffers::Offset<wnn::NamedAttrList> func = 0,
    const std::vector<int32_t> *shape = nullptr,
    const std::vector<int8_t> *data = nullptr) {
  auto s__ = s ? _fbb.CreateString(s) : 0;
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto shape__ = shape ? _fbb.CreateVector<int32_t>(*shape) : 0;
  auto data__ = data ? _fbb.CreateVector<int8_t>(*data) : 0;
  return wnn::CreateAttribute(
      _fbb,
      s__,
      i,
      b,
      key__,
      type,
      f,
      blob,
      list,
      func,
      shape__,
      data__);
}

flatbuffers::Offset<Attribute> CreateAttribute(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NamedAttrListT : public flatbuffers::NativeTable {
  typedef NamedAttrList TableType;
  std::string name{};
  std::vector<std::unique_ptr<wnn::AttributeT>> attr{};
  NamedAttrListT() = default;
  NamedAttrListT(const NamedAttrListT &o);
  NamedAttrListT(NamedAttrListT&&) FLATBUFFERS_NOEXCEPT = default;
  NamedAttrListT &operator=(NamedAttrListT o) FLATBUFFERS_NOEXCEPT;
};

struct NamedAttrList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NamedAttrListT NativeTableType;
  typedef NamedAttrListBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return NamedAttrListTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ATTR = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<wnn::Attribute>> *attr() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<wnn::Attribute>> *>(VT_ATTR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ATTR) &&
           verifier.VerifyVector(attr()) &&
           verifier.VerifyVectorOfTables(attr()) &&
           verifier.EndTable();
  }
  NamedAttrListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NamedAttrListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NamedAttrList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NamedAttrListBuilder {
  typedef NamedAttrList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(NamedAttrList::VT_NAME, name);
  }
  void add_attr(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<wnn::Attribute>>> attr) {
    fbb_.AddOffset(NamedAttrList::VT_ATTR, attr);
  }
  explicit NamedAttrListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NamedAttrList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NamedAttrList>(end);
    return o;
  }
};

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<wnn::Attribute>>> attr = 0) {
  NamedAttrListBuilder builder_(_fbb);
  builder_.add_attr(attr);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    std::vector<flatbuffers::Offset<wnn::Attribute>> *attr = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto attr__ = attr ? _fbb.CreateVectorOfSortedTables<wnn::Attribute>(attr) : 0;
  return wnn::CreateNamedAttrList(
      _fbb,
      name__,
      attr__);
}

flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BlobT *Blob::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BlobT>(new BlobT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Blob::UnPackTo(BlobT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dims(); if (_e) { _o->dims.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->dims[_i] = _e->Get(_i); } } }
  { auto _e = dataformat(); _o->dataformat = _e; }
  { auto _e = dtype(); _o->dtype = _e; }
  { auto _e = device(); _o->device = _e; }
  { auto _e = uint8s(); if (_e) { _o->uint8s.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->uint8s.begin()); } }
  { auto _e = int8s(); if (_e) { _o->int8s.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->int8s.begin()); } }
  { auto _e = int32s(); if (_e) { _o->int32s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->int32s[_i] = _e->Get(_i); } } }
  { auto _e = int64s(); if (_e) { _o->int64s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->int64s[_i] = _e->Get(_i); } } }
  { auto _e = float32s(); if (_e) { _o->float32s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->float32s[_i] = _e->Get(_i); } } }
  { auto _e = strings(); if (_e) { _o->strings.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->strings[_i] = _e->Get(_i)->str(); } } }
}

inline flatbuffers::Offset<Blob> Blob::Pack(flatbuffers::FlatBufferBuilder &_fbb, const BlobT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBlob(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Blob> CreateBlob(flatbuffers::FlatBufferBuilder &_fbb, const BlobT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const BlobT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dims = _o->dims.size() ? _fbb.CreateVector(_o->dims) : 0;
  auto _dataformat = _o->dataformat;
  auto _dtype = _o->dtype;
  auto _device = _o->device;
  auto _uint8s = _o->uint8s.size() ? _fbb.CreateVector(_o->uint8s) : 0;
  auto _int8s = _o->int8s.size() ? _fbb.CreateVector(_o->int8s) : 0;
  auto _int32s = _o->int32s.size() ? _fbb.CreateVector(_o->int32s) : 0;
  auto _int64s = _o->int64s.size() ? _fbb.CreateVector(_o->int64s) : 0;
  auto _float32s = _o->float32s.size() ? _fbb.CreateVector(_o->float32s) : 0;
  auto _strings = _o->strings.size() ? _fbb.CreateVectorOfStrings(_o->strings) : 0;
  return wnn::CreateBlob(
      _fbb,
      _dims,
      _dataformat,
      _dtype,
      _device,
      _uint8s,
      _int8s,
      _int32s,
      _int64s,
      _float32s,
      _strings);
}

inline ListValueT *ListValue::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ListValueT>(new ListValueT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ListValue::UnPackTo(ListValueT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = s(); if (_e) { _o->s.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->s[_i] = _e->Get(_i)->str(); } } }
  { auto _e = i(); if (_e) { _o->i.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->i[_i] = _e->Get(_i); } } }
  { auto _e = f(); if (_e) { _o->f.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->f[_i] = _e->Get(_i); } } }
  { auto _e = b(); if (_e) { _o->b.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->b[_i] = _e->Get(_i) != 0; } } }
  { auto _e = type(); if (_e) { _o->type.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->type[_i] = static_cast<wnn::DataType>(_e->Get(_i)); } } }
}

inline flatbuffers::Offset<ListValue> ListValue::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateListValue(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ListValue> CreateListValue(flatbuffers::FlatBufferBuilder &_fbb, const ListValueT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ListValueT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _s = _o->s.size() ? _fbb.CreateVectorOfStrings(_o->s) : 0;
  auto _i = _o->i.size() ? _fbb.CreateVector(_o->i) : 0;
  auto _f = _o->f.size() ? _fbb.CreateVector(_o->f) : 0;
  auto _b = _o->b.size() ? _fbb.CreateVector(_o->b) : 0;
  auto _type = _o->type.size() ? _fbb.CreateVectorScalarCast<int32_t>(flatbuffers::data(_o->type), _o->type.size()) : 0;
  return wnn::CreateListValue(
      _fbb,
      _s,
      _i,
      _f,
      _b,
      _type);
}

inline AttributeT::AttributeT(const AttributeT &o)
      : s(o.s),
        i(o.i),
        b(o.b),
        key(o.key),
        type(o.type),
        f(o.f),
        blob((o.blob) ? new wnn::BlobT(*o.blob) : nullptr),
        list((o.list) ? new wnn::ListValueT(*o.list) : nullptr),
        func((o.func) ? new wnn::NamedAttrListT(*o.func) : nullptr),
        shape(o.shape),
        data(o.data) {
}

inline AttributeT &AttributeT::operator=(AttributeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(s, o.s);
  std::swap(i, o.i);
  std::swap(b, o.b);
  std::swap(key, o.key);
  std::swap(type, o.type);
  std::swap(f, o.f);
  std::swap(blob, o.blob);
  std::swap(list, o.list);
  std::swap(func, o.func);
  std::swap(shape, o.shape);
  std::swap(data, o.data);
  return *this;
}

inline AttributeT *Attribute::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AttributeT>(new AttributeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Attribute::UnPackTo(AttributeT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = s(); if (_e) _o->s = _e->str(); }
  { auto _e = i(); _o->i = _e; }
  { auto _e = b(); _o->b = _e; }
  { auto _e = key(); if (_e) _o->key = _e->str(); }
  { auto _e = type(); _o->type = _e; }
  { auto _e = f(); _o->f = _e; }
  { auto _e = blob(); if (_e) { if(_o->blob) { _e->UnPackTo(_o->blob.get(), _resolver); } else { _o->blob = std::unique_ptr<wnn::BlobT>(_e->UnPack(_resolver)); } } }
  { auto _e = list(); if (_e) { if(_o->list) { _e->UnPackTo(_o->list.get(), _resolver); } else { _o->list = std::unique_ptr<wnn::ListValueT>(_e->UnPack(_resolver)); } } }
  { auto _e = func(); if (_e) { if(_o->func) { _e->UnPackTo(_o->func.get(), _resolver); } else { _o->func = std::unique_ptr<wnn::NamedAttrListT>(_e->UnPack(_resolver)); } } }
  { auto _e = shape(); if (_e) { _o->shape.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->shape[_i] = _e->Get(_i); } } }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->data.begin()); } }
}

inline flatbuffers::Offset<Attribute> Attribute::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAttribute(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Attribute> CreateAttribute(flatbuffers::FlatBufferBuilder &_fbb, const AttributeT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AttributeT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _s = _o->s.empty() ? 0 : _fbb.CreateString(_o->s);
  auto _i = _o->i;
  auto _b = _o->b;
  auto _key = _fbb.CreateString(_o->key);
  auto _type = _o->type;
  auto _f = _o->f;
  auto _blob = _o->blob ? CreateBlob(_fbb, _o->blob.get(), _rehasher) : 0;
  auto _list = _o->list ? CreateListValue(_fbb, _o->list.get(), _rehasher) : 0;
  auto _func = _o->func ? CreateNamedAttrList(_fbb, _o->func.get(), _rehasher) : 0;
  auto _shape = _o->shape.size() ? _fbb.CreateVector(_o->shape) : 0;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return wnn::CreateAttribute(
      _fbb,
      _s,
      _i,
      _b,
      _key,
      _type,
      _f,
      _blob,
      _list,
      _func,
      _shape,
      _data);
}

inline NamedAttrListT::NamedAttrListT(const NamedAttrListT &o)
      : name(o.name) {
  attr.reserve(o.attr.size());
  for (const auto &attr_ : o.attr) { attr.emplace_back((attr_) ? new wnn::AttributeT(*attr_) : nullptr); }
}

inline NamedAttrListT &NamedAttrListT::operator=(NamedAttrListT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(attr, o.attr);
  return *this;
}

inline NamedAttrListT *NamedAttrList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<NamedAttrListT>(new NamedAttrListT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NamedAttrList::UnPackTo(NamedAttrListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = attr(); if (_e) { _o->attr.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->attr[_i]) { _e->Get(_i)->UnPackTo(_o->attr[_i].get(), _resolver); } else { _o->attr[_i] = std::unique_ptr<wnn::AttributeT>(_e->Get(_i)->UnPack(_resolver)); }; } } }
}

inline flatbuffers::Offset<NamedAttrList> NamedAttrList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNamedAttrList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NamedAttrList> CreateNamedAttrList(flatbuffers::FlatBufferBuilder &_fbb, const NamedAttrListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const NamedAttrListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _attr = _o->attr.size() ? _fbb.CreateVector<flatbuffers::Offset<wnn::Attribute>> (_o->attr.size(), [](size_t i, _VectorArgs *__va) { return CreateAttribute(*__va->__fbb, __va->__o->attr[i].get(), __va->__rehasher); }, &_va ) : 0;
  return wnn::CreateNamedAttrList(
      _fbb,
      _name,
      _attr);
}

inline const flatbuffers::TypeTable *WNN_DATA_FORMATTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    wnn::WNN_DATA_FORMATTypeTable
  };
  static const char * const names[] = {
    "NCHW",
    "NHWC",
    "NC4HW4",
    "NHWC4",
    "UNKNOWN"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *BlobTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_INT, 0, 1 },
    { flatbuffers::ET_INT, 0, 2 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_LONG, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    wnn::WNN_DATA_FORMATTypeTable,
    wnn::DataTypeTypeTable,
    wnn::DeviceTypeTypeTable
  };
  static const char * const names[] = {
    "dims",
    "dataformat",
    "dtype",
    "device",
    "uint8s",
    "int8s",
    "int32s",
    "int64s",
    "float32s",
    "strings"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 10, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ListValueTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_BOOL, 1, -1 },
    { flatbuffers::ET_INT, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    wnn::DataTypeTypeTable
  };
  static const char * const names[] = {
    "s",
    "i",
    "f",
    "b",
    "type"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *AttributeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, 0 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_INT, 1, -1 },
    { flatbuffers::ET_CHAR, 1, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    wnn::DataTypeTypeTable,
    wnn::BlobTypeTable,
    wnn::ListValueTypeTable,
    wnn::NamedAttrListTypeTable
  };
  static const char * const names[] = {
    "s",
    "i",
    "b",
    "key",
    "type",
    "f",
    "blob",
    "list",
    "func",
    "shape",
    "data"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 11, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *NamedAttrListTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    wnn::AttributeTypeTable
  };
  static const char * const names[] = {
    "name",
    "attr"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace wnn

#endif  // FLATBUFFERS_GENERATED_TENSOR_WNN_H_
